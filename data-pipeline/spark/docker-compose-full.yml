version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - iot-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9997:9997"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_OPTS: -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.rmi.port=9997
    networks:
      - iot-network

  iot-alerting-pipeline:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: iot-alerting-pipeline
    depends_on:
      - kafka
    environment:
      # Kafka configuration
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_TOPIC: iot-sensor-data
      KAFKA_CONSUMER_GROUP_ID: iot-alerting-consumer
      KAFKA_STARTING_OFFSETS: earliest
      
      # Spark configuration
      SPARK_APP_NAME: IoT-Kafka-Alerting-Pipeline-Docker
      SPARK_CHECKPOINT_LOCATION: /tmp/kafka-alerting-checkpoints/
      SPARK_PROCESSING_TIME_SECONDS: 10
      SPARK_LOG_LEVEL: WARN
      
      # Alerting configuration
      ALERT_RECIPIENT_EMAIL: ${ALERT_RECIPIENT_EMAIL:-admin@company.com}
      
      # SMTP configuration (passed from host environment)
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      EMAIL_FROM_ADDRESS: ${EMAIL_FROM_ADDRESS:-iot-alerts@company.com}
      EMAIL_SUBJECT_PREFIX: ${EMAIL_SUBJECT_PREFIX:-[IoT Alert]}
    volumes:
      # Mount checkpoint directory to persist across container restarts
      - kafka-checkpoints:/tmp/kafka-alerting-checkpoints
      # Mount logs directory for debugging
      - ./logs:/app/logs
    networks:
      - iot-network
    restart: unless-stopped
    # Wait for Kafka to be ready
    command: >
      sh -c "
        echo 'Waiting for Kafka to be ready...'
        while ! nc -z kafka 29092; do
          sleep 1
        done
        echo 'Kafka is ready, starting IoT Alerting Pipeline...'
        ./bin/data-pipeline-scala processing.KafkaAlertingPipeline
      "

volumes:
  kafka-checkpoints:
    driver: local

networks:
  iot-network:
    driver: bridge
