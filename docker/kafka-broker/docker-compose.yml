# networks:
#   iot-net:

# services:
#   zookeeper:
#     image: confluentinc/cp-zookeeper:7.2.1
#     container_name: zookeeper
#     networks:
#       - iot-net
#     environment:
#       ZOOKEEPER_CLIENT_PORT: 2181
#       ZOOKEEPER_TICK_TIME: 2000

#   kafka:
#     image: confluentinc/cp-kafka:7.2.1
#     container_name: kafka
#     depends_on:
#       - zookeeper
#     networks:
#       - iot-net
#     ports:
#       - "9092:9092" # For host access (e.g., producers on your machine)
#     environment:
#       KAFKA_BROKER_ID: 1
#       KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
#       KAFKA_LISTENERS: "INTERNAL://0.0.0.0:9093,EXTERNAL://0.0.0.0:9092"
#       KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:9093,EXTERNAL://localhost:9092"
#       KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
#       KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
#       KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

networks:
  iot-net:
    driver: bridge

services:
  # Zookeeper service
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    container_name: zookeeper
    networks:
      - iot-net
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    # healthcheck:
    #   test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5

  # Kafka service
  kafka:
    image: confluentinc/cp-kafka:7.2.1
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - iot-net
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENERS: "INTERNAL://0.0.0.0:9093,EXTERNAL://0.0.0.0:9092"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:9093,EXTERNAL://localhost:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    # healthcheck:
    #   test:
    #     [
    #       "CMD",
    #       "kafka-broker-api-versions",
    #       "--bootstrap-server",
    #       "localhost:9092",
    #     ]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5

  # Spark Master
  spark-master:
    image: bitnami/spark:3.3.2
    container_name: spark-master
    networks:
      - iot-net
    ports:
      - "7077:7077"
      - "8080:8080"
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:8080"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5

  # Spark Worker
  spark-worker:
    image: bitnami/spark:3.3.2
    container_name: spark-worker
    depends_on:
      spark-master:
        condition: service_healthy
    networks:
      - iot-net
    ports:
      - "8081:8081"
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2g
      - SPARK_WORKER_CORES=2
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:8081"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5

  # IoT Data Producer
  iot-producer:
    build:
      context: ../../sensor-simulator/
      dockerfile: Dockerfile
    container_name: iot-producer
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - iot-net
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9093
      - KAFKA_TOPIC=iot-sensors
      - PRODUCER_INTERVAL=5000
    restart: unless-stopped

  # Spark Ingest Service
  spark-ingest:
    build:
      context: ../../data-pipeline/spark/
      dockerfile: Dockerfile
    container_name: spark-ingest
    depends_on:
      kafka:
        condition: service_healthy
      spark-master:
        condition: service_healthy
      spark-worker:
        condition: service_healthy
    networks:
      - iot-net
    environment:
      - HOME=/tmp
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-eu-west-3}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9093
      - KAFKA_TOPIC=iot-sensors
      - S3_BUCKET=${S3_BUCKET:-my-iot-bucket}
      - SPARK_MASTER=spark://spark-master:7077
      - CHECKPOINT_LOCATION=s3a://${S3_BUCKET:-my-iot-bucket}/checkpoints/iot-pipeline
    # restart: unless-stopped
    volumes:
      - ./logs:/app/logs

  # Optional: Kafka UI for monitoring
  # kafka-ui:
  #   image: provectuslabs/kafka-ui:latest
  #   container_name: kafka-ui
  #   depends_on:
  #     kafka:
  #       condition: service_healthy
  #   networks:
  #     - iot-net
  #   ports:
  #     - "8090:8080"
  #   environment:
  #     - KAFKA_CLUSTERS_0_NAME=local
  #     - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9093
  #     - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181

volumes:
  kafka-data:
  zookeeper-data:
  spark-logs:
